/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hogwarts;

import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author Kasper
 */
public class Setters {
    //Uppdaterar en students förnamn efter elev_id, det nya förnamnet blir parametern nName
    public static void updateStudentFirstname(InfDB db, int id, String nName){
        try{
            db.update("UPDATE ELEV SET FORNAMN = '" + nName +  "' WHERE ELEV_ID = " + id);
            System.out.println("Bra");
        }
        catch(InfException e){
            System.out.println(e);
        }   
    }
    //Uppdaterar en students efternamn efter elev_id, det nya efternamnet blir parametern nName
    public static void updateStudentSurname(InfDB db, int id, String nName){
        try{
            db.update("UPDATE ELEV SET EFTERNAMN = '" + nName +  "' WHERE ELEV_ID = " + id);
            System.out.println("Success");
        }
        catch(InfException e){
            System.out.println("Something went wrong");
        }   
    }
    //Uppdaterar sovsal för angiven student efter elev_id, den nya sovsalen blir parametern nSovsal
    public static void updateStudentSovsal(InfDB db, int id, int nSovsal){
        try{
            db.update("UPDATE ELEV SET SOVSAL = '" + nSovsal +  "' WHERE ELEV_ID = " + id);
        }
        catch(InfException e){
            System.out.println(e);
        }
    }
    //Uppdaterar all information om en elev efter elev_id, all information får nya värden av parametrarna
    public static void updateElev(InfDB db, int elevID, String firstname, String surname, int sovsal_id) {
        try {
            db.update("UPDATE ELEV SET FORNAMN = '" + firstname + "', EFTERNAMN = '" + surname + "', SOVSAL = " + 
            sovsal_id + " WHERE ELEV_ID = " + elevID);
        }
        catch(InfException e) {
            System.out.println(e);
        }
    }
    //Uppdaterar ett elevhems huspoäng efter elevhemsnamn, den nya poängen blir gamla värdet plus parametern changepoint
    public static int updateDormitoryPoints(InfDB db, String dormitory, int changepoint){
        int newpoint = 0;
        try{
            int existingPoint = Integer.parseInt(db.fetchSingle("SELECT HUSPOANG FROM ELEVHEM WHERE ELEVHEMSNAMN = '" + dormitory + "'"));
            newpoint = existingPoint + changepoint;
            db.update("UPDATE ELEVHEM SET HUSPOANG = "+ newpoint + " WHERE ELEVHEMSNAMN = '" + dormitory + "'");    
        }
        catch(InfException e){
            System.out.println(e);
        }
        return newpoint;
    }
    //Uppdaterar lösenordet för angiven lärare efter lärar_id, det nya lösenordet får värdet från parametern newPass
    public static void upDatePassword(InfDB db, char[] newPass, int id){
        try{
            String st ="";
            for(char c : newPass){
                st +=c;
            }
            db.update("UPDATE LARARE SET LOSENORD = '" + st + "' WHERE LARAR_ID = " + id);
            System.out.println("Password is changed");
        }
        catch(InfException e){
            System.out.print(e);
        }
    }
    //Lägger till en ny elev i databasen
    public static void addElev(InfDB db, String firstname, String surname,int sovsal){
        try{
            int id = Integer.parseInt(db.fetchSingle("SELECT MAX (ELEV_ID) FROM ELEV")) + 1;
            db.insert("INSERT INTO ELEV values(" + id + ", '" + firstname + "', '" + surname + "', " + sovsal + ")");   
        }
        catch(InfException e){
            System.out.println(e);
        }   
    }
    //Ger ett betyg till en elev efter för- och efternamn samt vilken kurs, kursens betyg blir parametern grade
    public static void setGrade(InfDB db, String firstname, String surname, String grade, String courseName){
        int studentID = Integer.parseInt(Getter.getStudentID(db, firstname, surname));
        int courseID = Getter.getCourseID(db, courseName);
        try{
            db.insert("INSERT INTO HAR_BETYG_I VALUES(" + studentID + ", " + courseID + ", '" + grade + "')");
            System.out.println("Grade is updated");
        }
        catch(InfException e){
            System.out.println(e);
        }
    }
     //Lägger till lärare
    public static void addLärare(InfDB db, String firstname, String surname, String pass, char admin){
        try{
            int id = Integer.parseInt(db.fetchSingle("SELECT MAX(LARAR_ID) FROM LARARE")) + 1;
            db.insert("INSERT INTO LARARE values(" + id + ", '" + firstname + "', '" + surname + "', '" + pass + "', '" + admin +"')");
        }
        catch(InfException e){
            System.out.println(e);
        }
    }
    //Uppdaterar betyg efter för- och efternamn på angiven kurs, det nya betyget blir parametern grade
    public static void updateGrade(InfDB db, String firstname, String surname, String grade, String course){
        int studentID = Integer.parseInt(Getter.getStudentID(db, firstname, surname));
        int courseID = Getter.getCourseID(db, course);
        try{
            db.update("UPDATE HAR_BETYG_I SET KURSBETYG ='" + grade + "' WHERE ELEV_ID = " + studentID + " AND KURS_ID =" + courseID);
            System.out.println("Grade is updated");
        }
        catch(InfException e){
            System.out.println(e);
        }
    }
}
   
    
